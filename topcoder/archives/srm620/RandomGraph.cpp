// BEGIN CUT HERE
/* PROBLEM STATEMENT
// Consider a random undirected graph on n vertices.
The vertices are numbered 0 through n-1.
For each i and j such that 0 <= i < j <= n-1, the graph contains the edge i-j with probability p/1000.
The probabilities that different edges are present in the graph are all mutually independent.



You are given the ints n and p.
Calculate and return the probability that the random graph generated using the above procedure contains at least one connected component with 4 or more vertices.

DEFINITION
Class:RandomGraph
Method:probability
Parameters:int, int
Returns:double
Method signature:double probability(int n, int p)


NOTES
-Your return value must have an absolute or relative error less than 1e-9.
-A connected component is a maximal set S of vertices such that you can get from any vertex in S to any other vertex in S by following a sequence of edges. For example, if a graph with n=5 contains edges 0-2, 2-4, and 1-3, its connected components are {0,2,4} and {1,3}.


CONSTRAINTS
-n will be between 2 and 50, inclusive.
-p will be between 0 and 1000, inclusive.


EXAMPLES

0)
7
0

Returns: 0.0

The probability of each edge is 0. Therefore, this graph will always have 7 isolated vertices = 7 connected components, each with just a single vertex.

1)
3
620

Returns: 0.0

This graph only has 3 vertices, so it is impossible to have a connected component with at least 4 vertices.

2)
4
500

Returns: 0.59375

There are 64 different graphs on 4 labeled vertices.
As p=500, each of these 64 graphs is equally likely to be generated by our procedure. 
A graph on 4 vertices has a connected component with 4 or more vertices if and only if the entire graph is connected.
Out of our 64 possible graphs, 38 are connected.
Therefore, the probability we are looking for is 38/64.

3)
8
100

Returns: 0.33566851611343496

In this case, some of the good graphs have two connected components, each with 4 vertices.

4)
15
50

Returns: 0.5686761670525845



5)
50
10

Returns: 0.7494276522159893



6)
50
1000

Returns: 1.0


*/
// END CUT HERE
#line 95 "RandomGraph.cpp"
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<cmath>
#include<cctype>
#include<iostream>
#include<algorithm>
#include<queue>
#include<vector>
#include<map>
#include<set>
#include<stack>
#include<utility>
#include<string>
#include<sstream>
using namespace std;
#define CLR(x,a) memset(x,a,sizeof(x))
#define SZ(x) (int)x.size()
#define FOR(i,n) for(i=0;i<(n);i++)
#define INF 1<<20

typedef long long ll;

string itos(int a) {
    stringstream ss;
    ss << a;
    return ss.str();
}

class RandomGraph {
	public:
	double probability (int n, int p) {
	
	}
	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); if ((Case == -1) || (Case == 4)) test_case_4(); if ((Case == -1) || (Case == 5)) test_case_5(); if ((Case == -1) || (Case == 6)) test_case_6(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const double &Expected, const double &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { int Arg0 = 7; int Arg1 = 0; double Arg2 = 0.0; verify_case(0, Arg2, probability(Arg0, Arg1)); }
	void test_case_1() { int Arg0 = 3; int Arg1 = 620; double Arg2 = 0.0; verify_case(1, Arg2, probability(Arg0, Arg1)); }
	void test_case_2() { int Arg0 = 4; int Arg1 = 500; double Arg2 = 0.59375; verify_case(2, Arg2, probability(Arg0, Arg1)); }
	void test_case_3() { int Arg0 = 8; int Arg1 = 100; double Arg2 = 0.33566851611343496; verify_case(3, Arg2, probability(Arg0, Arg1)); }
	void test_case_4() { int Arg0 = 15; int Arg1 = 50; double Arg2 = 0.5686761670525845; verify_case(4, Arg2, probability(Arg0, Arg1)); }
	void test_case_5() { int Arg0 = 50; int Arg1 = 10; double Arg2 = 0.7494276522159893; verify_case(5, Arg2, probability(Arg0, Arg1)); }
	void test_case_6() { int Arg0 = 50; int Arg1 = 1000; double Arg2 = 1.0; verify_case(6, Arg2, probability(Arg0, Arg1)); }

// END CUT HERE

};

// BEGIN CUT HERE
int main() {
	RandomGraph __test;
	__test.run_test(-1);
}
// END CUT HERE
